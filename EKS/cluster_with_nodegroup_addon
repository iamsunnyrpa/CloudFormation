AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template to create an Amazon EKS cluster with a managed node group and add-ons'

Parameters:
  ClusterName:
    Type: String
    Default: my-eks-cluster
    Description: Name of the EKS cluster

  KubernetesVersion:
    Type: String
    Default: '1.28'
    Description: Kubernetes version for the EKS cluster
    AllowedValues:
      - '1.27'
      - '1.28'
      - '1.29'
      - '1.30'
      - '1.31'
  CoreDnsAddonVersion:
    Type: String
    Default: 'v1.10.1-eksbuild.18'
    Description: CoreDNS version for the EKS cluster
    AllowedValues:
      - v1.10.1-eksbuild.18
      - v1.10.1-eksbuild.17
      - v1.10.1-eksbuild.16
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC where the EKS cluster will be created

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of subnet IDs for the EKS cluster and node group

  NodeGroupName:
    Type: String
    Default: my-node-group
    Description: Name of the EKS node group

  NodeInstanceType:
    Type: String
    Default: t3.medium
    Description: EC2 instance type for the node group
    AllowedValues:
      - t3.small
      - t3.medium
      - t3.large
      - m5.large
      - m5.xlarge
      - c5.large
      - c5.xlarge

  NodeGroupDesiredCapacity:
    Type: Number
    Default: 2
    Description: Desired number of nodes in the node group
    MinValue: 1
    MaxValue: 10

  NodeGroupMinSize:
    Type: Number
    Default: 1
    Description: Minimum number of nodes in the node group
    MinValue: 1
    MaxValue: 10

  NodeGroupMaxSize:
    Type: Number
    Default: 4
    Description: Maximum number of nodes in the node group
    MinValue: 1
    MaxValue: 20
#When you have existing key available uncomment beloa "KeyName: with all the parametrs to use it."
  #KeyName:
    #Type: AWS::EC2::KeyPair::KeyName
    #Description: EC2 Key Pair for SSH access to the nodes
    #Default: ''

Resources:
  # IAM Role for EKS Cluster
  EksClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  #Get OIDC for the EKS cluster
  EksOidcProviderUrl:
    Type: Custom::EksOidcProviderUrl
    Properties:
      ServiceToken: !GetAtt OidcProviderUrlFunction.Arn
      ClusterName: !Ref ClusterName
    DependsOn:   EksCluster

    # EKS Cluster
  EksCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: !Ref KubernetesVersion
      RoleArn: !GetAtt EksClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds: !Ref SubnetIds
        SecurityGroupIds:
          - !Ref EksClusterSecurityGroup
        EndpointPublicAccess: true
        EndpointPrivateAccess: true

  # Security Group for EKS Cluster
  EksClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EKS cluster
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Allow HTTPS traffic to the EKS API server

  # IAM Role for Node Group
  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  # EKS Node Group
  EksNodeGroup:
    Type: AWS::EKS::Nodegroup
    DependsOn: EksCluster
    Properties:
      ClusterName: !Ref ClusterName
      NodegroupName: !Ref NodeGroupName
      NodeRole: !GetAtt NodeInstanceRole.Arn
      ScalingConfig:
        MinSize: !Ref NodeGroupMinSize
        DesiredSize: !Ref NodeGroupDesiredCapacity
        MaxSize: !Ref NodeGroupMaxSize
      Subnets: !Ref SubnetIds
      InstanceTypes:
        - !Ref NodeInstanceType
      #RemoteAccess:
        #Fn::If:
          #- HasKeyName
          #- Ec2SshKey: !Ref KeyName
          #- !Ref AWS::NoValue
      Tags:
        Name: !Sub '${ClusterName}-node'

  # EKS Add-ons
  CoreDnsAddon:
    Type: AWS::EKS::Addon
    DependsOn: EksNodeGroup
    Properties:
      AddonName: coredns
      ClusterName: !Ref ClusterName
      AddonVersion: !Ref CoreDnsAddonVersion
      
      ResolveConflicts: OVERWRITE

  KubeProxyAddon:
    Type: AWS::EKS::Addon
    DependsOn: EksNodeGroup
    Properties:
      AddonName: kube-proxy
      ClusterName: !Ref ClusterName
      #AddonVersion: auto
      ResolveConflicts: OVERWRITE

  VpcCniAddon:
    Type: AWS::EKS::Addon
    DependsOn: EksNodeGroup
    Properties:
      AddonName: vpc-cni
      ClusterName: !Ref ClusterName
      #AddonVersion: auto
      ResolveConflicts: OVERWRITE
